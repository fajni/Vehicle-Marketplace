// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VehicleMarketplace.Data;

#nullable disable

namespace VehicleMarketplace.Migrations
{
    [DbContext(typeof(VehicleMarketplaceDbContext))]
    partial class VehicleMarketplaceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("VehicleMarketplace.Models.Car", b =>
                {
                    b.Property<string>("Vin")
                        .HasMaxLength(17)
                        .HasColumnType("varchar(17)")
                        .HasColumnName("vin");

                    b.Property<double>("Capacity")
                        .HasColumnType("double")
                        .HasColumnName("capacity");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<int>("MakeId")
                        .HasColumnType("int")
                        .HasColumnName("make_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<double>("Power")
                        .HasColumnType("double")
                        .HasColumnName("power");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("price");

                    b.Property<int>("UserAccountId")
                        .HasColumnType("int")
                        .HasColumnName("user_account_id");

                    b.HasKey("Vin");

                    b.HasIndex("MakeId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("cars");
                });

            modelBuilder.Entity("VehicleMarketplace.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("image_id");

                    b.Property<string>("CarVin")
                        .HasColumnType("varchar(17)")
                        .HasColumnName("image_car_vin");

                    b.Property<string>("MotorcycleVin")
                        .HasColumnType("varchar(17)")
                        .HasColumnName("image_motorcycle_vin");

                    b.Property<string>("Src")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("image_path");

                    b.HasKey("Id");

                    b.HasIndex("CarVin");

                    b.HasIndex("MotorcycleVin");

                    b.ToTable("images");
                });

            modelBuilder.Entity("VehicleMarketplace.Models.Make", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("make_id");

                    b.Property<string>("MakeName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("make_name");

                    b.HasKey("Id");

                    b.HasIndex("MakeName")
                        .IsUnique();

                    b.ToTable("makes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MakeName = "BMW"
                        },
                        new
                        {
                            Id = 2,
                            MakeName = "Audi"
                        },
                        new
                        {
                            Id = 3,
                            MakeName = "Dodge"
                        },
                        new
                        {
                            Id = 4,
                            MakeName = "Alfa Romeo"
                        },
                        new
                        {
                            Id = 5,
                            MakeName = "Nissan"
                        },
                        new
                        {
                            Id = 6,
                            MakeName = "Dacia"
                        },
                        new
                        {
                            Id = 7,
                            MakeName = "Bentley"
                        },
                        new
                        {
                            Id = 8,
                            MakeName = "Chevrolet"
                        },
                        new
                        {
                            Id = 9,
                            MakeName = "Ford"
                        },
                        new
                        {
                            Id = 10,
                            MakeName = "Honda"
                        });
                });

            modelBuilder.Entity("VehicleMarketplace.Models.Motorcycle", b =>
                {
                    b.Property<string>("Vin")
                        .HasMaxLength(17)
                        .HasColumnType("varchar(17)")
                        .HasColumnName("vin");

                    b.Property<double>("Capacity")
                        .HasColumnType("double")
                        .HasColumnName("capacity");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<int>("MakeId")
                        .HasColumnType("int")
                        .HasColumnName("make_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<double>("Power")
                        .HasColumnType("double")
                        .HasColumnName("power");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("price");

                    b.Property<int>("UserAccountId")
                        .HasColumnType("int")
                        .HasColumnName("user_account_id");

                    b.HasKey("Vin");

                    b.HasIndex("MakeId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("motorcycles");
                });

            modelBuilder.Entity("VehicleMarketplace.Models.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("firstname");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("lastname");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("role");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("user_accounts");
                });

            modelBuilder.Entity("VehicleMarketplace.Models.Car", b =>
                {
                    b.HasOne("VehicleMarketplace.Models.Make", "Make")
                        .WithMany("cars")
                        .HasForeignKey("MakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VehicleMarketplace.Models.UserAccount", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Make");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("VehicleMarketplace.Models.Image", b =>
                {
                    b.HasOne("VehicleMarketplace.Models.Car", "Car")
                        .WithMany("Images")
                        .HasForeignKey("CarVin")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VehicleMarketplace.Models.Motorcycle", "Motorcycle")
                        .WithMany("Images")
                        .HasForeignKey("MotorcycleVin")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Car");

                    b.Navigation("Motorcycle");
                });

            modelBuilder.Entity("VehicleMarketplace.Models.Motorcycle", b =>
                {
                    b.HasOne("VehicleMarketplace.Models.Make", "Make")
                        .WithMany("motorcycles")
                        .HasForeignKey("MakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VehicleMarketplace.Models.UserAccount", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Make");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("VehicleMarketplace.Models.Car", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("VehicleMarketplace.Models.Make", b =>
                {
                    b.Navigation("cars");

                    b.Navigation("motorcycles");
                });

            modelBuilder.Entity("VehicleMarketplace.Models.Motorcycle", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
